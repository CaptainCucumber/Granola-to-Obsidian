name: Release Obsidian Plugin

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  
jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get version from tag  
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Update README version badge
        run: |
          # Find the correct README file (case insensitive)
          README_FILE=""
          if [ -f "README.md" ]; then
            README_FILE="README.md"
          elif [ -f "readme.md" ]; then
            README_FILE="readme.md"
          elif [ -f "Readme.md" ]; then
            README_FILE="Readme.md"
          else
            echo "No README file found"
            exit 0
          fi
          
          echo "Found README file: $README_FILE"
          
          # Update version badge in the README file
          sed -i 's/version-[0-9]\+\.[0-9]\+\.[0-9]\+-blue/version-${{ steps.version.outputs.VERSION }}-blue/g' "$README_FILE"
          
          # Verify the change was made
          echo "Updated $README_FILE version badge:"
          grep "version-.*-blue" "$README_FILE" || echo "No version badge found to update"
      
      - name: Commit README changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Find the README file again
          README_FILE=""
          if [ -f "README.md" ]; then
            README_FILE="README.md"
          elif [ -f "readme.md" ]; then
            README_FILE="readme.md"
          elif [ -f "Readme.md" ]; then
            README_FILE="Readme.md"
          fi
          
          # Check if README was actually changed
          if [ -z "$README_FILE" ] || git diff --quiet "$README_FILE"; then
            echo "No changes to README file"
          else
            git add "$README_FILE"
            git commit -m "Update README version badge to v${{ steps.version.outputs.VERSION }}"
            git push origin HEAD:main
            echo "$README_FILE updated and pushed âœ…"
          fi
      
      - name: Verify plugin files exist
        run: |
          if [[ ! -f "main.js" ]]; then echo "main.js not found"; exit 1; fi
          if [[ ! -f "manifest.json" ]]; then echo "manifest.json not found"; exit 1; fi
          if [[ ! -f "styles.css" ]]; then echo "styles.css not found"; exit 1; fi
          if [[ ! -f "versions.json" ]]; then echo "versions.json not found"; exit 1; fi
          echo "All plugin files verified âœ…"
      
      - name: Create plugin zip
        run: |
          # Create folder with plugin name
          mkdir granola-sync
          
          # Copy plugin files to folder
          cp main.js granola-sync/
          cp manifest.json granola-sync/
          cp styles.css granola-sync/
          cp versions.json granola-sync/
          
          # Create zip file with just version number
          zip -r ${{ steps.version.outputs.VERSION }}.zip granola-sync/
          
          # Verify zip was created
          ls -la *.zip
          echo "Plugin zip created: ${{ steps.version.outputs.VERSION }}.zip âœ…"
          
      - name: Create GitHub Release
        run: |
          gh release create v${{ steps.version.outputs.VERSION }} \
            --title "Granola Sync v${{ steps.version.outputs.VERSION }}" \
            --notes "## ðŸš€ Granola Sync v${{ steps.version.outputs.VERSION }}
            
            ### ðŸ“¦ Installation Options
            
            **Option 1: Download ZIP (Recommended)**
            1. Download \`${{ steps.version.outputs.VERSION }}.zip\`
            2. Extract the \`granola-sync\` folder to \`.obsidian/plugins/\` in your vault
            3. Enable the plugin in Obsidian Settings â†’ Community Plugins
            
            **Option 2: Manual Installation**  
            1. Download individual files: \`main.js\`, \`manifest.json\`, \`styles.css\`, \`versions.json\`
            2. Create folder \`.obsidian/plugins/granola-sync/\` in your vault
            3. Place all files in the folder
            4. Enable the plugin in Obsidian Settings â†’ Community Plugins
            
            ---
            
            For detailed changelog and features, see the [README](https://github.com/dannymcc/Granola-to-Obsidian/blob/main/README.md)." \
            main.js manifest.json styles.css versions.json ${{ steps.version.outputs.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
