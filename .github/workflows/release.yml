name: Release Obsidian Plugin

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  
jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get version from tag  
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Update version files
        run: |
          # Update manifest.json version
          sed -i 's/"version": "[^"]*"/"version": "${{ steps.version.outputs.VERSION }}"/g' manifest.json
          echo "Updated manifest.json version to ${{ steps.version.outputs.VERSION }}"
          
          # Update versions.json with new version
          # First check if the version already exists
          if ! grep -q '"${{ steps.version.outputs.VERSION }}"' versions.json; then
            # Use jq to properly add the new version to maintain valid JSON
            jq '. += {"${{ steps.version.outputs.VERSION }}": "0.15.0"}' versions.json > versions_temp.json && mv versions_temp.json versions.json
            echo "Added version ${{ steps.version.outputs.VERSION }} to versions.json"
          else
            echo "Version ${{ steps.version.outputs.VERSION }} already exists in versions.json"
          fi
          
          # Find the correct README file (case insensitive)
          README_FILE=""
          if [ -f "README.md" ]; then
            README_FILE="README.md"
          elif [ -f "readme.md" ]; then
            README_FILE="readme.md"
          elif [ -f "Readme.md" ]; then
            README_FILE="Readme.md"
          else
            echo "No README file found"
            exit 0
          fi
          
          echo "Found README file: $README_FILE"
          
          # Update version badge in the README file
          sed -i 's/version-[0-9]\+\.[0-9]\+\.[0-9]\+-blue/version-${{ steps.version.outputs.VERSION }}-blue/g' "$README_FILE"
          
          # Verify the changes were made
          echo "Updated files:"
          echo "manifest.json version: $(grep '"version"' manifest.json)"
          echo "$README_FILE version badge: $(grep 'version-.*-blue' "$README_FILE" || echo 'No version badge found')"
      
      - name: Commit version updates
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Find the README file again
          README_FILE=""
          if [ -f "README.md" ]; then
            README_FILE="README.md"
          elif [ -f "readme.md" ]; then
            README_FILE="readme.md"
          elif [ -f "Readme.md" ]; then
            README_FILE="Readme.md"
          fi
          
          # Check if any files were actually changed
          if git diff --quiet manifest.json versions.json $README_FILE 2>/dev/null; then
            echo "No changes to version files"
          else
            git add manifest.json versions.json $README_FILE 2>/dev/null || true
            git commit -m "Update version files to v${{ steps.version.outputs.VERSION }}"
            git push origin HEAD:main
            echo "Version files updated and pushed ✅"
          fi
      
      - name: Verify plugin files exist
        run: |
          if [[ ! -f "main.js" ]]; then echo "main.js not found"; exit 1; fi
          if [[ ! -f "manifest.json" ]]; then echo "manifest.json not found"; exit 1; fi
          if [[ ! -f "styles.css" ]]; then echo "styles.css not found"; exit 1; fi
          if [[ ! -f "versions.json" ]]; then echo "versions.json not found"; exit 1; fi
          echo "All plugin files verified ✅"
      
      - name: Create plugin zip
        run: |
          # Create folder with plugin name
          mkdir granola-sync
          
          # Copy plugin files to folder
          cp main.js granola-sync/
          cp manifest.json granola-sync/
          cp styles.css granola-sync/
          cp versions.json granola-sync/
          
          # Create zip file with just version number
          zip -r ${{ steps.version.outputs.VERSION }}.zip granola-sync/
          
          # Verify zip was created
          ls -la *.zip
          echo "Plugin zip created: ${{ steps.version.outputs.VERSION }}.zip ✅"
          
      - name: Extract changelog for this version
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            # Extract the changelog section for this version
            VERSION_WITHOUT_V=${{ steps.version.outputs.VERSION }}
            
            # Get content between this version and the next version header
            CHANGELOG_SECTION=$(awk "/^## \[$VERSION_WITHOUT_V\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md)
            
            if [ -n "$CHANGELOG_SECTION" ]; then
              echo "Found changelog section for version $VERSION_WITHOUT_V"
              echo "$CHANGELOG_SECTION" > RELEASE_CHANGELOG.txt
            else
              echo "No specific changelog found for version $VERSION_WITHOUT_V"
              echo "## 📝 Changes" > RELEASE_CHANGELOG.txt
              echo "" >> RELEASE_CHANGELOG.txt
              echo "See the full [CHANGELOG.md](https://github.com/dannymcc/Granola-to-Obsidian/blob/main/CHANGELOG.md) for details." >> RELEASE_CHANGELOG.txt
            fi
          else
            # Fallback to git commits if no CHANGELOG.md
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            
            if [ -z "$PREVIOUS_TAG" ]; then
              echo "## 🚀 First Release" > RELEASE_CHANGELOG.txt
              echo "" >> RELEASE_CHANGELOG.txt
              echo "Initial version of Granola Sync plugin." >> RELEASE_CHANGELOG.txt
            else
              echo "## 📝 Changes" > RELEASE_CHANGELOG.txt
              echo "" >> RELEASE_CHANGELOG.txt
              git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> RELEASE_CHANGELOG.txt
            fi
          fi
          
          echo "Release changelog:"
          cat RELEASE_CHANGELOG.txt
          
      - name: Create clean version tag
        run: |
          # Create a clean tag without 'v' prefix for Obsidian compatibility
          git tag ${{ steps.version.outputs.VERSION }}
          git push origin ${{ steps.version.outputs.VERSION }}
          echo "Created clean tag: ${{ steps.version.outputs.VERSION }}"
      
      - name: Create GitHub Release
        run: |
          # Read the extracted changelog
          CHANGELOG_CONTENT=$(cat RELEASE_CHANGELOG.txt)
          
          gh release create ${{ steps.version.outputs.VERSION }} \
            --title "Granola Sync v${{ steps.version.outputs.VERSION }}" \
            --notes "## 🚀 Granola Sync v${{ steps.version.outputs.VERSION }}
            
            $CHANGELOG_CONTENT
            
            ### 📦 Installation Options
            
            **Option 1: Download ZIP (Recommended)**
            1. Download \`${{ steps.version.outputs.VERSION }}.zip\`
            2. Extract the \`granola-sync\` folder to \`.obsidian/plugins/\` in your vault
            3. Enable the plugin in Obsidian Settings → Community Plugins
            
            **Option 2: Manual Installation**  
            1. Download individual files: \`main.js\`, \`manifest.json\`, \`styles.css\`, \`versions.json\`
            2. Create folder \`.obsidian/plugins/granola-sync/\` in your vault
            3. Place all files in the folder
            4. Enable the plugin in Obsidian Settings → Community Plugins" \
            main.js manifest.json styles.css versions.json ${{ steps.version.outputs.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
